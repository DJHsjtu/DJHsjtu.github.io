var K=Object.create;var w=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var X=Object.getPrototypeOf,Z=Object.prototype.hasOwnProperty;var _=s=>w(s,"__esModule",{value:!0});var ee=(s,e)=>{_(s);for(var a in e)w(s,a,{get:e[a],enumerable:!0})},te=(s,e,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of W(e))!Z.call(s,t)&&t!=="default"&&w(s,t,{get:()=>e[t],enumerable:!(a=Q(e,t))||a.enumerable});return s},p=s=>te(_(w(s!=null?K(X(s)):{},"default",s&&s.__esModule&&"default"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);var i=(s,e,a)=>new Promise((t,r)=>{var o=n=>{try{d(a.next(n))}catch(u){r(u)}},m=n=>{try{d(a.throw(n))}catch(u){r(u)}},d=n=>n.done?t(n.value):Promise.resolve(n.value).then(o,m);d((a=a.apply(s,e)).next())});ee(exports,{default:()=>A});var b=p(require("obsidian"));var q=p(require("obsidian"));var M={required:{name:"",present:""},folder:""};var L={required:{owner:"",repo:"",branch:"main",token:"",message:"upload from emo-uploader\xB7Github"},path:"",random:!0};var F={required:{uid:"",token:""}};var I={required:{token:""}};var l;(function(r){r.Github="Github",r.Smms="SM.MS",r.ImgURL="ImgURL",r.Cloudinary="Cloudinary"})(l||(l={}));var N=[l.Github,l.Smms,l.ImgURL,l.Cloudinary],G={choice:l.Github,github_parms:L,smms_parms:I,imgurl_parms:F,cloudinary_parms:M};var P=p(require("obsidian"));var c=class{constructor(e,a,t,r){this.kind=a,this.tab=t.createDiv(e),this.display(this.tab,r),this.tab.hide()}update(e){this.kind===e?this.tab.show():this.tab.hide()}};var S=class extends c{display(e,a){let t=a.config.cloudinary_parms;e.createEl("h3",{text:"Cloudinary Settings"}),new P.Setting(e).setName("Cloud Name").setDesc("The name of your Cloudinary Cloud Account").addText(r=>{r.setPlaceholder("").setValue(t.required.name).onChange(o=>i(this,null,function*(){t.required.name=o,yield a.saveSettings()}))}),new P.Setting(e).setName("Cloudinary Upload Template").setDesc("Cloudinary Upload Preference string").addText(r=>{r.setPlaceholder("").setValue(t.required.present).onChange(o=>i(this,null,function*(){t.required.present=o,yield a.saveSettings()}))}),new P.Setting(e).setName("Cloudinary Upload Folder").setDesc("Folder name to use in Cloudinary.  Note, this will be ignored if you have a folder set in your Cloudinary Upload Preset").addText(r=>{r.setPlaceholder("obsidian -> obsidian/pic.png").setValue(t.folder).onChange(o=>i(this,null,function*(){t.folder=o,yield a.saveSettings()}))})}};var g=p(require("obsidian"));var T=class extends c{display(e,a){let t=a.config.github_parms;e.createEl("h3",{text:"Github Settings"}),new g.Setting(e).setName("owner").setDesc("the account owner of the repository").addText(r=>{r.setPlaceholder("").setValue(t.required.owner).onChange(o=>i(this,null,function*(){t.required.owner=o,yield a.saveSettings()}))}),new g.Setting(e).setName("repo").setDesc("the name of the repository").addText(r=>{r.setPlaceholder("").setValue(t.required.repo).onChange(o=>i(this,null,function*(){t.required.repo=o,yield a.saveSettings()}))}),new g.Setting(e).setName("branch").setDesc("target branch").addText(r=>{r.setPlaceholder("").setValue(t.required.branch).onChange(o=>i(this,null,function*(){t.required.branch=o,yield a.saveSettings()}))}),new g.Setting(e).setName("token").setDesc("Github token").addText(r=>{r.setPlaceholder("").setValue(t.required.token).onChange(o=>i(this,null,function*(){t.required.token=o,yield a.saveSettings()}))}),new g.Setting(e).setName("message").setDesc("commit message").addText(r=>{r.setPlaceholder("").setValue(t.required.message).onChange(o=>i(this,null,function*(){t.required.message=o,yield a.saveSettings()}))}),new g.Setting(e).setName("path").setDesc("target path").addText(r=>{r.setPlaceholder("obsidian/ -> obsidian/pic.png").setValue(t.path).onChange(o=>i(this,null,function*(){t.path=o,yield a.saveSettings()}))}),new g.Setting(e).setName("random filename").setDesc("Random file names will greatly avoid duplicate file names. If you are sure that you need to use the original file name during this upload, make sure that no duplicate naming will occur under the path you choose.").addToggle(r=>{r.setValue(t.random),r.onChange(o=>i(this,null,function*(){t.random=o,yield a.saveSettings()}))})}};var x=p(require("obsidian"));var C=class extends c{display(e,a){let t=a.config.imgurl_parms;e.createEl("h3",{text:"ImgURL Settings"}),new x.Setting(e).setName("uid").setDesc("ImgURL uid").addText(r=>{r.setPlaceholder("").setValue(t.required.uid).onChange(o=>i(this,null,function*(){t.required.uid=o,yield a.saveSettings()}))}),new x.Setting(e).setName("token").setDesc("ImgURL token").addText(r=>{r.setPlaceholder("").setValue(t.required.token).onChange(o=>i(this,null,function*(){t.required.token=o,yield a.saveSettings()}))})}};var B=p(require("obsidian"));var E=class extends c{display(e,a){let t=a.config.smms_parms;e.createEl("h3",{text:"SM.MS Settings"}),new B.Setting(e).setName("token").setDesc("SM.MS token").addText(r=>{r.setPlaceholder("").setValue(t.required.token).onChange(o=>i(this,null,function*(){t.required.token=o,yield a.saveSettings()}))})}};var U=class extends q.PluginSettingTab{constructor(e,a){super(e,a);this.partlist=[];this.plugin=a}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Target"});let a=new q.Setting(e).setName("target hosting").setDesc("Choose your target. Make sure you have completely filled in the necessary parameters of the selected platform."),t=new T("github",l.Github,e,this.plugin);this.partlist.push(t);let r=new S("cloudinary",l.Cloudinary,e,this.plugin);this.partlist.push(r);let o=new E("smms",l.Smms,e,this.plugin);this.partlist.push(o);let m=new C("imgurl",l.ImgURL,e,this.plugin);this.partlist.push(m),this.partlist.forEach(d=>{d.update(this.plugin.config.choice)}),a.addDropdown(d=>{N.forEach(n=>{d.addOption(n,n)}),d.setValue(this.plugin.config.choice).onChange(n=>i(this,null,function*(){this.plugin.config.choice=n,yield this.plugin.saveSettings(),this.partlist.forEach(u=>{u.update(this.plugin.config.choice)})}))})}};var H=p(require("obsidian"));function V(s){return i(this,null,function*(){return yield new Promise((e,a)=>{let t=new FileReader,r;t.readAsArrayBuffer(s),t.onload=()=>{r=t.result},t.onerror=o=>{a(o)},t.onloadend=()=>{e(r)}})})}function O(s){return i(this,null,function*(){return yield new Promise((e,a)=>{let t=new FileReader,r;t.readAsDataURL(s),t.onload=()=>{r=t.result,r=r.slice(r.indexOf(",")+1)},t.onerror=o=>{a(o)},t.onloadend=()=>{e(r)}})})}function $(){return Date.parse(new Date().toString()).toString()+(Math.random()*10086).toString(36).slice(-6)}var h=class{isValid(){let e=!0;for(let a in this.required)if(e&&(e=re(this.required[a])),!e)return!1;return!0}};function re(s){return s.length>0}var D=class extends h{constructor(e){super();this.required=e.required,this.path=e.path,this.random=e.random}upload(e){return i(this,null,function*(){let a="";if(this.random){let m=e.name.lastIndexOf(".");a=this.path+$(),a+=m>0?e.name.substring(m):""}else a=this.path+e.name;let t={owner:this.required.owner,repo:this.required.repo,branch:this.required.branch,path:a,message:this.required.message,content:yield O(e)},r=JSON.stringify(t),o={url:`https://api.github.com/repos/${this.required.owner}/${this.required.repo}/contents/${a}`,method:"PUT",headers:{Authorization:`token ${this.required.token}`},body:r};return yield new Promise((m,d)=>{(0,H.request)(o).then(()=>{let n=`![](https://fastly.jsdelivr.net/gh/${this.required.owner}/${this.required.repo}@${this.required.branch}/${a})`;m(n)}).catch(n=>{d("Github"),console.log(n)})})})}};var j=p(require("obsidian"));var y=class{constructor(e){this.result=[],this.randomBoundary=e,this.boundary="--"+this.randomBoundary,this.endBoundary=this.boundary+"--"}addParm(e,a){let t=this.boundary+`\r
`;t+='Content-Disposition: form-data; name="'+e+`"\r
\r
`,t+=a+`\r
`;for(let r=0;r<t.length;r++)this.result.push(t.charCodeAt(r))}addFile(e,a){return i(this,null,function*(){let t=this.boundary+`\r
`;t+='Content-Disposition: form-data; name="'+e+'"; filename="'+a.name+`"\r
`,t+="Content-Type: "+a.type+`\r
\r
`;for(let o=0;o<t.length;o++)this.result.push(t.charCodeAt(o));yield V(a).then(o=>{let m=new Uint8Array(o);this.result=this.result.concat(Array.prototype.slice.call(m))});let r=`\r
`;for(let o=0;o<r.length;o++)this.result.push(r.charCodeAt(o));return!0})}pack(){let e=[];for(let t=0;t<this.endBoundary.length;t++)e.push(this.endBoundary.charCodeAt(t));return this.result=this.result.concat(e),new Uint8Array(this.result).buffer}};var v=class extends h{constructor(e){super();this.required=e.required}upload(e){return i(this,null,function*(){let a=Date.now().toString(16),t=new y(a);t.addParm("uid",this.required.uid),t.addParm("token",this.required.token),yield t.addFile("file",e);let r=t.pack(),o={url:"https://www.imgurl.org/api/v2/upload",method:"POST",contentType:"multipart/form-data",headers:{"Content-Type":"multipart/form-data;boundary="+a},body:r};return yield new Promise((m,d)=>{(0,j.request)(o).then(n=>{let f=`![](${JSON.parse(n).data.url})`;m(f)}).catch(n=>{d("ImgURL"),console.log(n)})})})}};var J=p(require("obsidian"));var R=class extends h{constructor(e){super();this.required=e.required,this.folder=e.folder}upload(e){return i(this,null,function*(){let a=Date.now().toString(16),t=new y(a);t.addParm("upload_preset",this.required.present),t.addParm("folder",this.folder),yield t.addFile("file",e);let r=t.pack(),o={url:`https://api.cloudinary.com/v1_1/${this.required.name}/auto/upload`,method:"POST",contentType:"multipart/form-data",headers:{"Content-Type":"multipart/form-data;boundary="+a},body:r};return yield new Promise((m,d)=>{(0,J.request)(o).then(n=>{let f=`![](${JSON.parse(n).secure_url})`;m(f)}).catch(n=>{d("Cloudinary"),console.log(n)})})})}};var z=p(require("obsidian"));var k=class extends h{constructor(e){super();this.required=e.required}upload(e){return i(this,null,function*(){let a=Date.now().toString(16),t=new y(a);t.addParm("format","json"),yield t.addFile("smfile",e);let r=t.pack(),o={url:"https://sm.ms/api/v2/upload",method:"POST",contentType:"multipart/form-data",headers:{"Content-Type":"multipart/form-data;boundary="+a,Authorization:this.required.token},body:r};return yield new Promise((m,d)=>{(0,z.request)(o).then(n=>{let u=JSON.parse(n),f="";try{f=u.data.url}catch(ae){f=u.images}let Y=`![](${f})`;m(Y)}).catch(n=>{d("SM.MS"),console.log(n)})})})}};var A=class extends b.Plugin{setupPasteHandler(){this.registerEvent(this.app.workspace.on("editor-paste",(e,a)=>i(this,null,function*(){let{files:t}=e.clipboardData,r;if(t.length>0){switch(this.config.choice){case l.Github:r=new D(this.config.github_parms);break;case l.ImgURL:r=new v(this.config.imgurl_parms);break;case l.Cloudinary:r=new R(this.config.cloudinary_parms);break;case l.Smms:r=new k(this.config.smms_parms);break;default:console.log(new b.Notice("Emo broken. Check your target",2e3));return}if(r.isValid()){e.preventDefault();for(let o of t){let d=`![uploading...](${(Math.random()*10086).toString(36).slice(-6)})
`;a.replaceSelection(d),r.upload(o).then(n=>this.replaceText(a,d,n)).catch(n=>{console.log(new b.Notice(n+" net error",2e3))})}}else console.log(new b.Notice("Emo need more prams",2e3)),console.log(r)}})))}replaceText(e,a,t){a=a.trim();let r=[];for(let o=0;o<e.lineCount();o++)r.push(e.getLine(o));for(let o=0;o<r.length;o++){let m=r[o].indexOf(a);if(m!==-1){let d={line:o,ch:m},n={line:o,ch:m+a.length};e.replaceRange(t,d,n);break}}}onload(){return i(this,null,function*(){console.log("loading  Emo uploader"),yield this.loadSettings(),this.setupPasteHandler(),this.addSettingTab(new U(this.app,this))})}onunload(){console.log("unloading Emo uploader")}loadSettings(){return i(this,null,function*(){this.config=Object.assign({},G,yield this.loadData())})}saveSettings(){return i(this,null,function*(){yield this.saveData(this.config)})}};0&&(module.exports={});
